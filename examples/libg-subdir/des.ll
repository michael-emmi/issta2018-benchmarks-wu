; ModuleID = '<stdin>'
source_filename = "libg/des.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._des_ctx = type { [32 x i32], [32 x i32] }

@in_key = internal global [32 x i8] c"A\E1\03F\85\F7\E8\B8|aq\82\1D\DB8\83.\0FL*T,\07\F0KJ\07\95\D0\00\E8p", align 16
@in = internal global [64 x i8] zeroinitializer, align 16
@out = internal global [64 x i8] zeroinitializer, align 16
@des_setkey.selftest_failed = internal global i8* null, align 8
@leftkey_swap = internal global [16 x i32] [i32 0, i32 1, i32 256, i32 257, i32 65536, i32 65537, i32 65792, i32 65793, i32 16777216, i32 16777217, i32 16777472, i32 16777473, i32 16842752, i32 16842753, i32 16843008, i32 16843009], align 16
@rightkey_swap = internal global [16 x i32] [i32 0, i32 16777216, i32 65536, i32 16842752, i32 256, i32 16777472, i32 65792, i32 16843008, i32 1, i32 16777217, i32 65537, i32 16842753, i32 257, i32 16777473, i32 65793, i32 16843009], align 16
@encrypt_rotate_tab = internal global [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@sbox8 = internal global [64 x i32] [i32 268439616, i32 4096, i32 262144, i32 268701760, i32 268435456, i32 268439616, i32 64, i32 268435456, i32 262208, i32 268697600, i32 268701760, i32 266240, i32 268701696, i32 266304, i32 4096, i32 64, i32 268697600, i32 268435520, i32 268439552, i32 4160, i32 266240, i32 262208, i32 268697664, i32 268701696, i32 4160, i32 0, i32 0, i32 268697664, i32 268435520, i32 268439552, i32 266304, i32 262144, i32 266304, i32 262144, i32 268701696, i32 4096, i32 64, i32 268697664, i32 4096, i32 266304, i32 268439552, i32 64, i32 268435520, i32 268697600, i32 268697664, i32 268435456, i32 262144, i32 268439616, i32 0, i32 268701760, i32 262208, i32 268435520, i32 268697600, i32 268439552, i32 268439616, i32 0, i32 268701760, i32 266240, i32 266240, i32 4160, i32 4160, i32 262208, i32 268435456, i32 268701696], align 16
@sbox6 = internal global [64 x i32] [i32 536870928, i32 541065216, i32 16384, i32 541081616, i32 541065216, i32 16, i32 541081616, i32 4194304, i32 536887296, i32 4210704, i32 4194304, i32 536870928, i32 4194320, i32 536887296, i32 536870912, i32 16400, i32 0, i32 4194320, i32 536887312, i32 16384, i32 4210688, i32 536887312, i32 16, i32 541065232, i32 541065232, i32 0, i32 4210704, i32 541081600, i32 16400, i32 4210688, i32 541081600, i32 536870912, i32 536887296, i32 16, i32 541065232, i32 4210688, i32 541081616, i32 4194304, i32 16400, i32 536870928, i32 4194304, i32 536887296, i32 536870912, i32 16400, i32 536870928, i32 541081616, i32 4210688, i32 541065216, i32 4210704, i32 541081600, i32 0, i32 541065232, i32 16, i32 16384, i32 541065216, i32 4210704, i32 16384, i32 4194320, i32 536887312, i32 0, i32 541081600, i32 536870912, i32 4194320, i32 536887312], align 16
@sbox4 = internal global [64 x i32] [i32 8396801, i32 8321, i32 8321, i32 128, i32 8396928, i32 8388737, i32 8388609, i32 8193, i32 0, i32 8396800, i32 8396800, i32 8396929, i32 129, i32 0, i32 8388736, i32 8388609, i32 1, i32 8192, i32 8388608, i32 8396801, i32 128, i32 8388608, i32 8193, i32 8320, i32 8388737, i32 1, i32 8320, i32 8388736, i32 8192, i32 8396928, i32 8396929, i32 129, i32 8388736, i32 8388609, i32 8396800, i32 8396929, i32 129, i32 0, i32 0, i32 8396800, i32 8320, i32 8388736, i32 8388737, i32 1, i32 8396801, i32 8321, i32 8321, i32 128, i32 8396929, i32 129, i32 1, i32 8192, i32 8388609, i32 8193, i32 8396928, i32 8388737, i32 8193, i32 8320, i32 8388608, i32 8396801, i32 128, i32 8388608, i32 8192, i32 8396928], align 16
@sbox2 = internal global [64 x i32] [i32 -2146402272, i32 -2147450880, i32 32768, i32 1081376, i32 1048576, i32 32, i32 -2146435040, i32 -2147450848, i32 -2147483616, i32 -2146402272, i32 -2146402304, i32 -2147483648, i32 -2147450880, i32 1048576, i32 32, i32 -2146435040, i32 1081344, i32 1048608, i32 -2147450848, i32 0, i32 -2147483648, i32 32768, i32 1081376, i32 -2146435072, i32 1048608, i32 -2147483616, i32 0, i32 1081344, i32 32800, i32 -2146402304, i32 -2146435072, i32 32800, i32 0, i32 1081376, i32 -2146435040, i32 1048576, i32 -2147450848, i32 -2146435072, i32 -2146402304, i32 32768, i32 -2146435072, i32 -2147450880, i32 32, i32 -2146402272, i32 1081376, i32 32, i32 32768, i32 -2147483648, i32 32800, i32 -2146402304, i32 1048576, i32 -2147483616, i32 1048608, i32 -2147450848, i32 -2147483616, i32 1048608, i32 1081344, i32 0, i32 -2147450880, i32 32800, i32 -2147483648, i32 -2146435040, i32 -2146402272, i32 1081344], align 16
@sbox7 = internal global [64 x i32] [i32 2097152, i32 69206018, i32 67110914, i32 0, i32 2048, i32 67110914, i32 2099202, i32 69208064, i32 69208066, i32 2097152, i32 0, i32 67108866, i32 2, i32 67108864, i32 69206018, i32 2050, i32 67110912, i32 2099202, i32 2097154, i32 67110912, i32 67108866, i32 69206016, i32 69208064, i32 2097154, i32 69206016, i32 2048, i32 2050, i32 69208066, i32 2099200, i32 2, i32 67108864, i32 2099200, i32 67108864, i32 2099200, i32 2097152, i32 67110914, i32 67110914, i32 69206018, i32 69206018, i32 2, i32 2097154, i32 67108864, i32 67110912, i32 2097152, i32 69208064, i32 2050, i32 2099202, i32 69208064, i32 2050, i32 67108866, i32 69208066, i32 69206016, i32 2099200, i32 0, i32 2, i32 69208066, i32 0, i32 2099202, i32 69206016, i32 2048, i32 67108866, i32 67110912, i32 2048, i32 2097154], align 16
@sbox5 = internal global [64 x i32] [i32 256, i32 34078976, i32 34078720, i32 1107296512, i32 524288, i32 256, i32 1073741824, i32 34078720, i32 1074266368, i32 524288, i32 33554688, i32 1074266368, i32 1107296512, i32 1107820544, i32 524544, i32 1073741824, i32 33554432, i32 1074266112, i32 1074266112, i32 0, i32 1073742080, i32 1107820800, i32 1107820800, i32 33554688, i32 1107820544, i32 1073742080, i32 0, i32 1107296256, i32 34078976, i32 33554432, i32 1107296256, i32 524544, i32 524288, i32 1107296512, i32 256, i32 33554432, i32 1073741824, i32 34078720, i32 1107296512, i32 1074266368, i32 33554688, i32 1073741824, i32 1107820544, i32 34078976, i32 1074266368, i32 256, i32 33554432, i32 1107820544, i32 1107820800, i32 524544, i32 1107296256, i32 1107820800, i32 34078720, i32 0, i32 1074266112, i32 1107296256, i32 524544, i32 33554688, i32 1073742080, i32 524288, i32 0, i32 1074266112, i32 34078976, i32 1073742080], align 16
@sbox3 = internal global [64 x i32] [i32 520, i32 134349312, i32 0, i32 134348808, i32 134218240, i32 0, i32 131592, i32 134218240, i32 131080, i32 134217736, i32 134217736, i32 131072, i32 134349320, i32 131080, i32 134348800, i32 520, i32 134217728, i32 8, i32 134349312, i32 512, i32 131584, i32 134348800, i32 134348808, i32 131592, i32 134218248, i32 131584, i32 131072, i32 134218248, i32 8, i32 134349320, i32 512, i32 134217728, i32 134349312, i32 134217728, i32 131080, i32 520, i32 131072, i32 134349312, i32 134218240, i32 0, i32 512, i32 131080, i32 134349320, i32 134218240, i32 134217736, i32 512, i32 0, i32 134348808, i32 134218248, i32 131072, i32 134217728, i32 134349320, i32 8, i32 131592, i32 131584, i32 134217736, i32 134348800, i32 134218248, i32 520, i32 134348800, i32 131592, i32 8, i32 134348808, i32 131584], align 16
@sbox1 = internal global [64 x i32] [i32 16843776, i32 0, i32 65536, i32 16843780, i32 16842756, i32 66564, i32 4, i32 65536, i32 1024, i32 16843776, i32 16843780, i32 1024, i32 16778244, i32 16842756, i32 16777216, i32 4, i32 1028, i32 16778240, i32 16778240, i32 66560, i32 66560, i32 16842752, i32 16842752, i32 16778244, i32 65540, i32 16777220, i32 16777220, i32 65540, i32 0, i32 1028, i32 66564, i32 16777216, i32 65536, i32 16843780, i32 4, i32 16842752, i32 16843776, i32 16777216, i32 16777216, i32 1024, i32 16842756, i32 65536, i32 66560, i32 16777220, i32 1024, i32 4, i32 16778244, i32 66564, i32 16843780, i32 65540, i32 16842752, i32 16778244, i32 16777220, i32 1028, i32 66564, i32 16843776, i32 1028, i32 16778240, i32 16778240, i32 0, i32 65540, i32 66560, i32 0, i32 16842756], align 16

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca [1 x %struct._des_ctx], align 16
  %2 = getelementptr inbounds [1 x %struct._des_ctx], [1 x %struct._des_ctx]* %1, i32 0, i32 0
  %3 = call i32 @des_setkey(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @in_key, i32 0, i32 0), %struct._des_ctx* %2)
  %4 = getelementptr inbounds [1 x %struct._des_ctx], [1 x %struct._des_ctx]* %1, i32 0, i32 0
  %5 = call i32 @des_ecb_crypt(%struct._des_ctx* %4, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @in, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @out, i32 0, i32 0), i32 0)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @des_setkey(i8*, %struct._des_ctx*) #0 {
  %3 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 0
  %4 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i32 0, i32 0
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = shl i32 %6, 24
  %8 = getelementptr inbounds i8, i8* %0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = shl i32 %10, 16
  %12 = or i32 %7, %11
  %13 = getelementptr inbounds i8, i8* %0, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl i32 %15, 8
  %17 = or i32 %12, %16
  %18 = getelementptr inbounds i8, i8* %0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = or i32 %17, %20
  %22 = getelementptr inbounds i8, i8* %0, i64 4
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl i32 %24, 24
  %26 = getelementptr inbounds i8, i8* %22, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl i32 %28, 16
  %30 = or i32 %25, %29
  %31 = getelementptr inbounds i8, i8* %22, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl i32 %33, 8
  %35 = or i32 %30, %34
  %36 = getelementptr inbounds i8, i8* %22, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = or i32 %35, %38
  %40 = lshr i32 %39, 4
  %41 = xor i32 %40, %21
  %42 = and i32 %41, 252645135
  %43 = xor i32 %21, %42
  %44 = shl i32 %42, 4
  %45 = xor i32 %39, %44
  %46 = xor i32 %45, %43
  %47 = and i32 %46, 269488144
  %48 = xor i32 %43, %47
  %49 = xor i32 %45, %47
  %50 = and i32 %48, 15
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds [16 x i32], [16 x i32]* @leftkey_swap, i64 0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = shl i32 %53, 3
  %55 = lshr i32 %48, 8
  %56 = and i32 %55, 15
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [16 x i32], [16 x i32]* @leftkey_swap, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = shl i32 %59, 2
  %61 = or i32 %54, %60
  %62 = lshr i32 %48, 16
  %63 = and i32 %62, 15
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [16 x i32], [16 x i32]* @leftkey_swap, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = shl i32 %66, 1
  %68 = or i32 %61, %67
  %69 = lshr i32 %48, 24
  %70 = and i32 %69, 15
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds [16 x i32], [16 x i32]* @leftkey_swap, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = or i32 %68, %73
  %75 = lshr i32 %48, 5
  %76 = and i32 %75, 15
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [16 x i32], [16 x i32]* @leftkey_swap, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = shl i32 %79, 7
  %81 = or i32 %74, %80
  %82 = lshr i32 %48, 13
  %83 = and i32 %82, 15
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [16 x i32], [16 x i32]* @leftkey_swap, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = shl i32 %86, 6
  %88 = or i32 %81, %87
  %89 = lshr i32 %48, 21
  %90 = and i32 %89, 15
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [16 x i32], [16 x i32]* @leftkey_swap, i64 0, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = shl i32 %93, 5
  %95 = or i32 %88, %94
  %96 = lshr i32 %48, 29
  %97 = and i32 %96, 15
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [16 x i32], [16 x i32]* @leftkey_swap, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = shl i32 %100, 4
  %102 = or i32 %95, %101
  %103 = and i32 %102, 268435455
  %104 = lshr i32 %49, 1
  %105 = and i32 %104, 15
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [16 x i32], [16 x i32]* @rightkey_swap, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = shl i32 %108, 3
  %110 = lshr i32 %49, 9
  %111 = and i32 %110, 15
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [16 x i32], [16 x i32]* @rightkey_swap, i64 0, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = shl i32 %114, 2
  %116 = or i32 %109, %115
  %117 = lshr i32 %49, 17
  %118 = and i32 %117, 15
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds [16 x i32], [16 x i32]* @rightkey_swap, i64 0, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = shl i32 %121, 1
  %123 = or i32 %116, %122
  %124 = lshr i32 %49, 25
  %125 = and i32 %124, 15
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [16 x i32], [16 x i32]* @rightkey_swap, i64 0, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = or i32 %123, %128
  %130 = lshr i32 %49, 4
  %131 = and i32 %130, 15
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds [16 x i32], [16 x i32]* @rightkey_swap, i64 0, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = shl i32 %134, 7
  %136 = or i32 %129, %135
  %137 = lshr i32 %49, 12
  %138 = and i32 %137, 15
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [16 x i32], [16 x i32]* @rightkey_swap, i64 0, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = shl i32 %141, 6
  %143 = or i32 %136, %142
  %144 = lshr i32 %49, 20
  %145 = and i32 %144, 15
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [16 x i32], [16 x i32]* @rightkey_swap, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = shl i32 %148, 5
  %150 = or i32 %143, %149
  %151 = lshr i32 %49, 28
  %152 = and i32 %151, 15
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds [16 x i32], [16 x i32]* @rightkey_swap, i64 0, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = shl i32 %155, 4
  %157 = or i32 %150, %156
  %158 = and i32 %157, 268435455
  br label %159

.preheader:                                       ; preds = %159
  %.0.ph = phi i32 [ 0, %159 ]
  br label %318

; <label>:159:                                    ; preds = %2, %159
  %.019 = phi i32 [ 0, %2 ], [ %316, %159 ]
  %.028 = phi i32 [ %158, %2 ], [ %185, %159 ]
  %.037 = phi i32 [ %103, %2 ], [ %172, %159 ]
  %.046 = phi i32* [ %4, %2 ], [ %315, %159 ]
  %160 = sext i32 %.019 to i64
  %161 = getelementptr inbounds [16 x i8], [16 x i8]* @encrypt_rotate_tab, i64 0, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = shl i32 %.037, %163
  %165 = sext i32 %.019 to i64
  %166 = getelementptr inbounds [16 x i8], [16 x i8]* @encrypt_rotate_tab, i64 0, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = sub nsw i32 28, %168
  %170 = lshr i32 %.037, %169
  %171 = or i32 %164, %170
  %172 = and i32 %171, 268435455
  %173 = sext i32 %.019 to i64
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* @encrypt_rotate_tab, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = shl i32 %.028, %176
  %178 = sext i32 %.019 to i64
  %179 = getelementptr inbounds [16 x i8], [16 x i8]* @encrypt_rotate_tab, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = sub nsw i32 28, %181
  %183 = lshr i32 %.028, %182
  %184 = or i32 %177, %183
  %185 = and i32 %184, 268435455
  %186 = shl i32 %172, 4
  %187 = and i32 %186, 603979776
  %188 = shl i32 %172, 28
  %189 = and i32 %188, 268435456
  %190 = or i32 %187, %189
  %191 = shl i32 %172, 14
  %192 = and i32 %191, 134217728
  %193 = or i32 %190, %192
  %194 = shl i32 %172, 18
  %195 = and i32 %194, 34078720
  %196 = or i32 %193, %195
  %197 = shl i32 %172, 6
  %198 = and i32 %197, 16777216
  %199 = or i32 %196, %198
  %200 = shl i32 %172, 9
  %201 = and i32 %200, 2097152
  %202 = or i32 %199, %201
  %203 = lshr i32 %172, 1
  %204 = and i32 %203, 1048576
  %205 = or i32 %202, %204
  %206 = shl i32 %172, 10
  %207 = and i32 %206, 262144
  %208 = or i32 %205, %207
  %209 = shl i32 %172, 2
  %210 = and i32 %209, 131072
  %211 = or i32 %208, %210
  %212 = lshr i32 %172, 10
  %213 = and i32 %212, 65536
  %214 = or i32 %211, %213
  %215 = lshr i32 %185, 13
  %216 = and i32 %215, 8192
  %217 = or i32 %214, %216
  %218 = lshr i32 %185, 4
  %219 = and i32 %218, 4096
  %220 = or i32 %217, %219
  %221 = shl i32 %185, 6
  %222 = and i32 %221, 2048
  %223 = or i32 %220, %222
  %224 = lshr i32 %185, 1
  %225 = and i32 %224, 1024
  %226 = or i32 %223, %225
  %227 = lshr i32 %185, 14
  %228 = and i32 %227, 512
  %229 = or i32 %226, %228
  %230 = and i32 %185, 256
  %231 = or i32 %229, %230
  %232 = lshr i32 %185, 5
  %233 = and i32 %232, 32
  %234 = or i32 %231, %233
  %235 = lshr i32 %185, 10
  %236 = and i32 %235, 16
  %237 = or i32 %234, %236
  %238 = lshr i32 %185, 3
  %239 = and i32 %238, 8
  %240 = or i32 %237, %239
  %241 = lshr i32 %185, 18
  %242 = and i32 %241, 4
  %243 = or i32 %240, %242
  %244 = lshr i32 %185, 26
  %245 = and i32 %244, 2
  %246 = or i32 %243, %245
  %247 = lshr i32 %185, 24
  %248 = and i32 %247, 1
  %249 = or i32 %246, %248
  %250 = getelementptr inbounds i32, i32* %.046, i32 1
  store i32 %249, i32* %.046, align 4
  %251 = shl i32 %172, 15
  %252 = and i32 %251, 536870912
  %253 = shl i32 %172, 17
  %254 = and i32 %253, 268435456
  %255 = or i32 %252, %254
  %256 = shl i32 %172, 10
  %257 = and i32 %256, 134217728
  %258 = or i32 %255, %257
  %259 = shl i32 %172, 22
  %260 = and i32 %259, 67108864
  %261 = or i32 %258, %260
  %262 = lshr i32 %172, 2
  %263 = and i32 %262, 33554432
  %264 = or i32 %261, %263
  %265 = shl i32 %172, 1
  %266 = and i32 %265, 16777216
  %267 = or i32 %264, %266
  %268 = shl i32 %172, 16
  %269 = and i32 %268, 2097152
  %270 = or i32 %267, %269
  %271 = shl i32 %172, 11
  %272 = and i32 %271, 1048576
  %273 = or i32 %270, %272
  %274 = shl i32 %172, 3
  %275 = and i32 %274, 524288
  %276 = or i32 %273, %275
  %277 = lshr i32 %172, 6
  %278 = and i32 %277, 262144
  %279 = or i32 %276, %278
  %280 = shl i32 %172, 15
  %281 = and i32 %280, 131072
  %282 = or i32 %279, %281
  %283 = lshr i32 %172, 4
  %284 = and i32 %283, 65536
  %285 = or i32 %282, %284
  %286 = lshr i32 %185, 2
  %287 = and i32 %286, 8192
  %288 = or i32 %285, %287
  %289 = shl i32 %185, 8
  %290 = and i32 %289, 4096
  %291 = or i32 %288, %290
  %292 = lshr i32 %185, 14
  %293 = and i32 %292, 2056
  %294 = or i32 %291, %293
  %295 = lshr i32 %185, 9
  %296 = and i32 %295, 1024
  %297 = or i32 %294, %296
  %298 = and i32 %185, 512
  %299 = or i32 %297, %298
  %300 = shl i32 %185, 7
  %301 = and i32 %300, 256
  %302 = or i32 %299, %301
  %303 = lshr i32 %185, 7
  %304 = and i32 %303, 32
  %305 = or i32 %302, %304
  %306 = lshr i32 %185, 3
  %307 = and i32 %306, 17
  %308 = or i32 %305, %307
  %309 = shl i32 %185, 2
  %310 = and i32 %309, 4
  %311 = or i32 %308, %310
  %312 = lshr i32 %185, 21
  %313 = and i32 %312, 2
  %314 = or i32 %311, %313
  %315 = getelementptr inbounds i32, i32* %250, i32 1
  store i32 %314, i32* %250, align 4
  %316 = add nsw i32 %.019, 1
  %317 = icmp slt i32 %316, 16
  br i1 %317, label %159, label %.preheader

; <label>:318:                                    ; preds = %318, %.preheader
  %.05 = phi i32 [ %.0.ph, %.preheader ], [ %354, %318 ]
  %319 = sub nuw nsw i32 30, %.05
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 0
  %322 = getelementptr inbounds [32 x i32], [32 x i32]* %321, i64 0, i64 %320
  %323 = load i32, i32* %322, align 4
  %324 = sext i32 %.05 to i64
  %325 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 1
  %326 = getelementptr inbounds [32 x i32], [32 x i32]* %325, i64 0, i64 %324
  store i32 %323, i32* %326, align 4
  %327 = sub nuw nsw i32 31, %.05
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 0
  %330 = getelementptr inbounds [32 x i32], [32 x i32]* %329, i64 0, i64 %328
  %331 = load i32, i32* %330, align 4
  %332 = add nuw nsw i32 %.05, 1
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 1
  %335 = getelementptr inbounds [32 x i32], [32 x i32]* %334, i64 0, i64 %333
  store i32 %331, i32* %335, align 4
  %336 = add nuw nsw i32 %.05, 2
  %337 = sub nuw nsw i32 30, %336
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 0
  %340 = getelementptr inbounds [32 x i32], [32 x i32]* %339, i64 0, i64 %338
  %341 = load i32, i32* %340, align 4
  %342 = sext i32 %336 to i64
  %343 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 1
  %344 = getelementptr inbounds [32 x i32], [32 x i32]* %343, i64 0, i64 %342
  store i32 %341, i32* %344, align 4
  %345 = sub nuw nsw i32 31, %336
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 0
  %348 = getelementptr inbounds [32 x i32], [32 x i32]* %347, i64 0, i64 %346
  %349 = load i32, i32* %348, align 4
  %350 = add nuw nsw i32 %336, 1
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %1, i32 0, i32 1
  %353 = getelementptr inbounds [32 x i32], [32 x i32]* %352, i64 0, i64 %351
  store i32 %349, i32* %353, align 4
  %354 = add nuw nsw i32 %336, 2
  %355 = icmp slt i32 %354, 32
  br i1 %355, label %318, label %356

; <label>:356:                                    ; preds = %318
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @des_ecb_crypt(%struct._des_ctx*, i8*, i8*, i32) #0 {
  %5 = icmp ne i32 %3, 0
  %6 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %0, i32 0, i32 1
  %7 = getelementptr inbounds %struct._des_ctx, %struct._des_ctx* %0, i32 0, i32 0
  %.sink = select i1 %5, [32 x i32]* %6, [32 x i32]* %7
  %8 = getelementptr inbounds [32 x i32], [32 x i32]* %.sink, i32 0, i32 0
  %9 = getelementptr inbounds i8, i8* %1, i64 0
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = shl i32 %11, 24
  %13 = getelementptr inbounds i8, i8* %9, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl i32 %15, 16
  %17 = or i32 %12, %16
  %18 = getelementptr inbounds i8, i8* %9, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl i32 %20, 8
  %22 = or i32 %17, %21
  %23 = getelementptr inbounds i8, i8* %9, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = or i32 %22, %25
  %27 = getelementptr inbounds i8, i8* %1, i64 4
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl i32 %29, 24
  %31 = getelementptr inbounds i8, i8* %27, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl i32 %33, 16
  %35 = or i32 %30, %34
  %36 = getelementptr inbounds i8, i8* %27, i64 2
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl i32 %38, 8
  %40 = or i32 %35, %39
  %41 = getelementptr inbounds i8, i8* %27, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %40, %43
  %45 = lshr i32 %26, 4
  %46 = xor i32 %45, %44
  %47 = and i32 %46, 252645135
  %48 = xor i32 %44, %47
  %49 = shl i32 %47, 4
  %50 = xor i32 %26, %49
  %51 = lshr i32 %50, 16
  %52 = xor i32 %51, %48
  %53 = and i32 %52, 65535
  %54 = xor i32 %48, %53
  %55 = shl i32 %53, 16
  %56 = xor i32 %50, %55
  %57 = lshr i32 %54, 2
  %58 = xor i32 %57, %56
  %59 = and i32 %58, 858993459
  %60 = xor i32 %56, %59
  %61 = shl i32 %59, 2
  %62 = xor i32 %54, %61
  %63 = lshr i32 %62, 8
  %64 = xor i32 %63, %60
  %65 = and i32 %64, 16711935
  %66 = xor i32 %60, %65
  %67 = shl i32 %65, 8
  %68 = xor i32 %62, %67
  %69 = shl i32 %68, 1
  %70 = lshr i32 %68, 31
  %71 = or i32 %69, %70
  %72 = xor i32 %66, %71
  %73 = and i32 %72, -1431655766
  %74 = xor i32 %71, %73
  %75 = xor i32 %66, %73
  %76 = shl i32 %75, 1
  %77 = lshr i32 %75, 31
  %78 = or i32 %76, %77
  %79 = getelementptr inbounds i32, i32* %8, i32 1
  %80 = load i32, i32* %8, align 4
  %81 = xor i32 %74, %80
  %82 = and i32 %81, 63
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = xor i32 %78, %85
  %87 = lshr i32 %81, 8
  %88 = and i32 %87, 63
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = xor i32 %86, %91
  %93 = lshr i32 %81, 16
  %94 = and i32 %93, 63
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = xor i32 %92, %97
  %99 = lshr i32 %81, 24
  %100 = and i32 %99, 63
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = xor i32 %98, %103
  %105 = shl i32 %74, 28
  %106 = lshr i32 %74, 4
  %107 = or i32 %105, %106
  %108 = getelementptr inbounds i32, i32* %79, i32 1
  %109 = load i32, i32* %79, align 4
  %110 = xor i32 %107, %109
  %111 = and i32 %110, 63
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = xor i32 %104, %114
  %116 = lshr i32 %110, 8
  %117 = and i32 %116, 63
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = xor i32 %115, %120
  %122 = lshr i32 %110, 16
  %123 = and i32 %122, 63
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = xor i32 %121, %126
  %128 = lshr i32 %110, 24
  %129 = and i32 %128, 63
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = xor i32 %127, %132
  %134 = getelementptr inbounds i32, i32* %108, i32 1
  %135 = load i32, i32* %108, align 4
  %136 = xor i32 %133, %135
  %137 = and i32 %136, 63
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = xor i32 %74, %140
  %142 = lshr i32 %136, 8
  %143 = and i32 %142, 63
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = xor i32 %141, %146
  %148 = lshr i32 %136, 16
  %149 = and i32 %148, 63
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = xor i32 %147, %152
  %154 = lshr i32 %136, 24
  %155 = and i32 %154, 63
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = xor i32 %153, %158
  %160 = shl i32 %133, 28
  %161 = lshr i32 %133, 4
  %162 = or i32 %160, %161
  %163 = getelementptr inbounds i32, i32* %134, i32 1
  %164 = load i32, i32* %134, align 4
  %165 = xor i32 %162, %164
  %166 = and i32 %165, 63
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = xor i32 %159, %169
  %171 = lshr i32 %165, 8
  %172 = and i32 %171, 63
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = xor i32 %170, %175
  %177 = lshr i32 %165, 16
  %178 = and i32 %177, 63
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %179
  %181 = load i32, i32* %180, align 4
  %182 = xor i32 %176, %181
  %183 = lshr i32 %165, 24
  %184 = and i32 %183, 63
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = xor i32 %182, %187
  %189 = getelementptr inbounds i32, i32* %163, i32 1
  %190 = load i32, i32* %163, align 4
  %191 = xor i32 %188, %190
  %192 = and i32 %191, 63
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %193
  %195 = load i32, i32* %194, align 4
  %196 = xor i32 %133, %195
  %197 = lshr i32 %191, 8
  %198 = and i32 %197, 63
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %199
  %201 = load i32, i32* %200, align 4
  %202 = xor i32 %196, %201
  %203 = lshr i32 %191, 16
  %204 = and i32 %203, 63
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = xor i32 %202, %207
  %209 = lshr i32 %191, 24
  %210 = and i32 %209, 63
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %211
  %213 = load i32, i32* %212, align 4
  %214 = xor i32 %208, %213
  %215 = shl i32 %188, 28
  %216 = lshr i32 %188, 4
  %217 = or i32 %215, %216
  %218 = getelementptr inbounds i32, i32* %189, i32 1
  %219 = load i32, i32* %189, align 4
  %220 = xor i32 %217, %219
  %221 = and i32 %220, 63
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = xor i32 %214, %224
  %226 = lshr i32 %220, 8
  %227 = and i32 %226, 63
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = xor i32 %225, %230
  %232 = lshr i32 %220, 16
  %233 = and i32 %232, 63
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = xor i32 %231, %236
  %238 = lshr i32 %220, 24
  %239 = and i32 %238, 63
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %240
  %242 = load i32, i32* %241, align 4
  %243 = xor i32 %237, %242
  %244 = getelementptr inbounds i32, i32* %218, i32 1
  %245 = load i32, i32* %218, align 4
  %246 = xor i32 %243, %245
  %247 = and i32 %246, 63
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = xor i32 %188, %250
  %252 = lshr i32 %246, 8
  %253 = and i32 %252, 63
  %254 = zext i32 %253 to i64
  %255 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = xor i32 %251, %256
  %258 = lshr i32 %246, 16
  %259 = and i32 %258, 63
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %260
  %262 = load i32, i32* %261, align 4
  %263 = xor i32 %257, %262
  %264 = lshr i32 %246, 24
  %265 = and i32 %264, 63
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %266
  %268 = load i32, i32* %267, align 4
  %269 = xor i32 %263, %268
  %270 = shl i32 %243, 28
  %271 = lshr i32 %243, 4
  %272 = or i32 %270, %271
  %273 = getelementptr inbounds i32, i32* %244, i32 1
  %274 = load i32, i32* %244, align 4
  %275 = xor i32 %272, %274
  %276 = and i32 %275, 63
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %277
  %279 = load i32, i32* %278, align 4
  %280 = xor i32 %269, %279
  %281 = lshr i32 %275, 8
  %282 = and i32 %281, 63
  %283 = zext i32 %282 to i64
  %284 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = xor i32 %280, %285
  %287 = lshr i32 %275, 16
  %288 = and i32 %287, 63
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %289
  %291 = load i32, i32* %290, align 4
  %292 = xor i32 %286, %291
  %293 = lshr i32 %275, 24
  %294 = and i32 %293, 63
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = xor i32 %292, %297
  %299 = getelementptr inbounds i32, i32* %273, i32 1
  %300 = load i32, i32* %273, align 4
  %301 = xor i32 %298, %300
  %302 = and i32 %301, 63
  %303 = zext i32 %302 to i64
  %304 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = xor i32 %243, %305
  %307 = lshr i32 %301, 8
  %308 = and i32 %307, 63
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %309
  %311 = load i32, i32* %310, align 4
  %312 = xor i32 %306, %311
  %313 = lshr i32 %301, 16
  %314 = and i32 %313, 63
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %315
  %317 = load i32, i32* %316, align 4
  %318 = xor i32 %312, %317
  %319 = lshr i32 %301, 24
  %320 = and i32 %319, 63
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %321
  %323 = load i32, i32* %322, align 4
  %324 = xor i32 %318, %323
  %325 = shl i32 %298, 28
  %326 = lshr i32 %298, 4
  %327 = or i32 %325, %326
  %328 = getelementptr inbounds i32, i32* %299, i32 1
  %329 = load i32, i32* %299, align 4
  %330 = xor i32 %327, %329
  %331 = and i32 %330, 63
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %332
  %334 = load i32, i32* %333, align 4
  %335 = xor i32 %324, %334
  %336 = lshr i32 %330, 8
  %337 = and i32 %336, 63
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %338
  %340 = load i32, i32* %339, align 4
  %341 = xor i32 %335, %340
  %342 = lshr i32 %330, 16
  %343 = and i32 %342, 63
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %344
  %346 = load i32, i32* %345, align 4
  %347 = xor i32 %341, %346
  %348 = lshr i32 %330, 24
  %349 = and i32 %348, 63
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %350
  %352 = load i32, i32* %351, align 4
  %353 = xor i32 %347, %352
  %354 = getelementptr inbounds i32, i32* %328, i32 1
  %355 = load i32, i32* %328, align 4
  %356 = xor i32 %353, %355
  %357 = and i32 %356, 63
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %358
  %360 = load i32, i32* %359, align 4
  %361 = xor i32 %298, %360
  %362 = lshr i32 %356, 8
  %363 = and i32 %362, 63
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %364
  %366 = load i32, i32* %365, align 4
  %367 = xor i32 %361, %366
  %368 = lshr i32 %356, 16
  %369 = and i32 %368, 63
  %370 = zext i32 %369 to i64
  %371 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %370
  %372 = load i32, i32* %371, align 4
  %373 = xor i32 %367, %372
  %374 = lshr i32 %356, 24
  %375 = and i32 %374, 63
  %376 = zext i32 %375 to i64
  %377 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %376
  %378 = load i32, i32* %377, align 4
  %379 = xor i32 %373, %378
  %380 = shl i32 %353, 28
  %381 = lshr i32 %353, 4
  %382 = or i32 %380, %381
  %383 = getelementptr inbounds i32, i32* %354, i32 1
  %384 = load i32, i32* %354, align 4
  %385 = xor i32 %382, %384
  %386 = and i32 %385, 63
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %387
  %389 = load i32, i32* %388, align 4
  %390 = xor i32 %379, %389
  %391 = lshr i32 %385, 8
  %392 = and i32 %391, 63
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %393
  %395 = load i32, i32* %394, align 4
  %396 = xor i32 %390, %395
  %397 = lshr i32 %385, 16
  %398 = and i32 %397, 63
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %399
  %401 = load i32, i32* %400, align 4
  %402 = xor i32 %396, %401
  %403 = lshr i32 %385, 24
  %404 = and i32 %403, 63
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %405
  %407 = load i32, i32* %406, align 4
  %408 = xor i32 %402, %407
  %409 = getelementptr inbounds i32, i32* %383, i32 1
  %410 = load i32, i32* %383, align 4
  %411 = xor i32 %408, %410
  %412 = and i32 %411, 63
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %413
  %415 = load i32, i32* %414, align 4
  %416 = xor i32 %353, %415
  %417 = lshr i32 %411, 8
  %418 = and i32 %417, 63
  %419 = zext i32 %418 to i64
  %420 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %419
  %421 = load i32, i32* %420, align 4
  %422 = xor i32 %416, %421
  %423 = lshr i32 %411, 16
  %424 = and i32 %423, 63
  %425 = zext i32 %424 to i64
  %426 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %425
  %427 = load i32, i32* %426, align 4
  %428 = xor i32 %422, %427
  %429 = lshr i32 %411, 24
  %430 = and i32 %429, 63
  %431 = zext i32 %430 to i64
  %432 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %431
  %433 = load i32, i32* %432, align 4
  %434 = xor i32 %428, %433
  %435 = shl i32 %408, 28
  %436 = lshr i32 %408, 4
  %437 = or i32 %435, %436
  %438 = getelementptr inbounds i32, i32* %409, i32 1
  %439 = load i32, i32* %409, align 4
  %440 = xor i32 %437, %439
  %441 = and i32 %440, 63
  %442 = zext i32 %441 to i64
  %443 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %442
  %444 = load i32, i32* %443, align 4
  %445 = xor i32 %434, %444
  %446 = lshr i32 %440, 8
  %447 = and i32 %446, 63
  %448 = zext i32 %447 to i64
  %449 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %448
  %450 = load i32, i32* %449, align 4
  %451 = xor i32 %445, %450
  %452 = lshr i32 %440, 16
  %453 = and i32 %452, 63
  %454 = zext i32 %453 to i64
  %455 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %454
  %456 = load i32, i32* %455, align 4
  %457 = xor i32 %451, %456
  %458 = lshr i32 %440, 24
  %459 = and i32 %458, 63
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %460
  %462 = load i32, i32* %461, align 4
  %463 = xor i32 %457, %462
  %464 = getelementptr inbounds i32, i32* %438, i32 1
  %465 = load i32, i32* %438, align 4
  %466 = xor i32 %463, %465
  %467 = and i32 %466, 63
  %468 = zext i32 %467 to i64
  %469 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %468
  %470 = load i32, i32* %469, align 4
  %471 = xor i32 %408, %470
  %472 = lshr i32 %466, 8
  %473 = and i32 %472, 63
  %474 = zext i32 %473 to i64
  %475 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %474
  %476 = load i32, i32* %475, align 4
  %477 = xor i32 %471, %476
  %478 = lshr i32 %466, 16
  %479 = and i32 %478, 63
  %480 = zext i32 %479 to i64
  %481 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %480
  %482 = load i32, i32* %481, align 4
  %483 = xor i32 %477, %482
  %484 = lshr i32 %466, 24
  %485 = and i32 %484, 63
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %486
  %488 = load i32, i32* %487, align 4
  %489 = xor i32 %483, %488
  %490 = shl i32 %463, 28
  %491 = lshr i32 %463, 4
  %492 = or i32 %490, %491
  %493 = getelementptr inbounds i32, i32* %464, i32 1
  %494 = load i32, i32* %464, align 4
  %495 = xor i32 %492, %494
  %496 = and i32 %495, 63
  %497 = zext i32 %496 to i64
  %498 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %497
  %499 = load i32, i32* %498, align 4
  %500 = xor i32 %489, %499
  %501 = lshr i32 %495, 8
  %502 = and i32 %501, 63
  %503 = zext i32 %502 to i64
  %504 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %503
  %505 = load i32, i32* %504, align 4
  %506 = xor i32 %500, %505
  %507 = lshr i32 %495, 16
  %508 = and i32 %507, 63
  %509 = zext i32 %508 to i64
  %510 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %509
  %511 = load i32, i32* %510, align 4
  %512 = xor i32 %506, %511
  %513 = lshr i32 %495, 24
  %514 = and i32 %513, 63
  %515 = zext i32 %514 to i64
  %516 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %515
  %517 = load i32, i32* %516, align 4
  %518 = xor i32 %512, %517
  %519 = getelementptr inbounds i32, i32* %493, i32 1
  %520 = load i32, i32* %493, align 4
  %521 = xor i32 %518, %520
  %522 = and i32 %521, 63
  %523 = zext i32 %522 to i64
  %524 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %523
  %525 = load i32, i32* %524, align 4
  %526 = xor i32 %463, %525
  %527 = lshr i32 %521, 8
  %528 = and i32 %527, 63
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %529
  %531 = load i32, i32* %530, align 4
  %532 = xor i32 %526, %531
  %533 = lshr i32 %521, 16
  %534 = and i32 %533, 63
  %535 = zext i32 %534 to i64
  %536 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %535
  %537 = load i32, i32* %536, align 4
  %538 = xor i32 %532, %537
  %539 = lshr i32 %521, 24
  %540 = and i32 %539, 63
  %541 = zext i32 %540 to i64
  %542 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %541
  %543 = load i32, i32* %542, align 4
  %544 = xor i32 %538, %543
  %545 = shl i32 %518, 28
  %546 = lshr i32 %518, 4
  %547 = or i32 %545, %546
  %548 = getelementptr inbounds i32, i32* %519, i32 1
  %549 = load i32, i32* %519, align 4
  %550 = xor i32 %547, %549
  %551 = and i32 %550, 63
  %552 = zext i32 %551 to i64
  %553 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %552
  %554 = load i32, i32* %553, align 4
  %555 = xor i32 %544, %554
  %556 = lshr i32 %550, 8
  %557 = and i32 %556, 63
  %558 = zext i32 %557 to i64
  %559 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %558
  %560 = load i32, i32* %559, align 4
  %561 = xor i32 %555, %560
  %562 = lshr i32 %550, 16
  %563 = and i32 %562, 63
  %564 = zext i32 %563 to i64
  %565 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %564
  %566 = load i32, i32* %565, align 4
  %567 = xor i32 %561, %566
  %568 = lshr i32 %550, 24
  %569 = and i32 %568, 63
  %570 = zext i32 %569 to i64
  %571 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %570
  %572 = load i32, i32* %571, align 4
  %573 = xor i32 %567, %572
  %574 = getelementptr inbounds i32, i32* %548, i32 1
  %575 = load i32, i32* %548, align 4
  %576 = xor i32 %573, %575
  %577 = and i32 %576, 63
  %578 = zext i32 %577 to i64
  %579 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = xor i32 %518, %580
  %582 = lshr i32 %576, 8
  %583 = and i32 %582, 63
  %584 = zext i32 %583 to i64
  %585 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %584
  %586 = load i32, i32* %585, align 4
  %587 = xor i32 %581, %586
  %588 = lshr i32 %576, 16
  %589 = and i32 %588, 63
  %590 = zext i32 %589 to i64
  %591 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %590
  %592 = load i32, i32* %591, align 4
  %593 = xor i32 %587, %592
  %594 = lshr i32 %576, 24
  %595 = and i32 %594, 63
  %596 = zext i32 %595 to i64
  %597 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %596
  %598 = load i32, i32* %597, align 4
  %599 = xor i32 %593, %598
  %600 = shl i32 %573, 28
  %601 = lshr i32 %573, 4
  %602 = or i32 %600, %601
  %603 = getelementptr inbounds i32, i32* %574, i32 1
  %604 = load i32, i32* %574, align 4
  %605 = xor i32 %602, %604
  %606 = and i32 %605, 63
  %607 = zext i32 %606 to i64
  %608 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %607
  %609 = load i32, i32* %608, align 4
  %610 = xor i32 %599, %609
  %611 = lshr i32 %605, 8
  %612 = and i32 %611, 63
  %613 = zext i32 %612 to i64
  %614 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %613
  %615 = load i32, i32* %614, align 4
  %616 = xor i32 %610, %615
  %617 = lshr i32 %605, 16
  %618 = and i32 %617, 63
  %619 = zext i32 %618 to i64
  %620 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %619
  %621 = load i32, i32* %620, align 4
  %622 = xor i32 %616, %621
  %623 = lshr i32 %605, 24
  %624 = and i32 %623, 63
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %625
  %627 = load i32, i32* %626, align 4
  %628 = xor i32 %622, %627
  %629 = getelementptr inbounds i32, i32* %603, i32 1
  %630 = load i32, i32* %603, align 4
  %631 = xor i32 %628, %630
  %632 = and i32 %631, 63
  %633 = zext i32 %632 to i64
  %634 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %633
  %635 = load i32, i32* %634, align 4
  %636 = xor i32 %573, %635
  %637 = lshr i32 %631, 8
  %638 = and i32 %637, 63
  %639 = zext i32 %638 to i64
  %640 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %639
  %641 = load i32, i32* %640, align 4
  %642 = xor i32 %636, %641
  %643 = lshr i32 %631, 16
  %644 = and i32 %643, 63
  %645 = zext i32 %644 to i64
  %646 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %645
  %647 = load i32, i32* %646, align 4
  %648 = xor i32 %642, %647
  %649 = lshr i32 %631, 24
  %650 = and i32 %649, 63
  %651 = zext i32 %650 to i64
  %652 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %651
  %653 = load i32, i32* %652, align 4
  %654 = xor i32 %648, %653
  %655 = shl i32 %628, 28
  %656 = lshr i32 %628, 4
  %657 = or i32 %655, %656
  %658 = getelementptr inbounds i32, i32* %629, i32 1
  %659 = load i32, i32* %629, align 4
  %660 = xor i32 %657, %659
  %661 = and i32 %660, 63
  %662 = zext i32 %661 to i64
  %663 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %662
  %664 = load i32, i32* %663, align 4
  %665 = xor i32 %654, %664
  %666 = lshr i32 %660, 8
  %667 = and i32 %666, 63
  %668 = zext i32 %667 to i64
  %669 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %668
  %670 = load i32, i32* %669, align 4
  %671 = xor i32 %665, %670
  %672 = lshr i32 %660, 16
  %673 = and i32 %672, 63
  %674 = zext i32 %673 to i64
  %675 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %674
  %676 = load i32, i32* %675, align 4
  %677 = xor i32 %671, %676
  %678 = lshr i32 %660, 24
  %679 = and i32 %678, 63
  %680 = zext i32 %679 to i64
  %681 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %680
  %682 = load i32, i32* %681, align 4
  %683 = xor i32 %677, %682
  %684 = getelementptr inbounds i32, i32* %658, i32 1
  %685 = load i32, i32* %658, align 4
  %686 = xor i32 %683, %685
  %687 = and i32 %686, 63
  %688 = zext i32 %687 to i64
  %689 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %688
  %690 = load i32, i32* %689, align 4
  %691 = xor i32 %628, %690
  %692 = lshr i32 %686, 8
  %693 = and i32 %692, 63
  %694 = zext i32 %693 to i64
  %695 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %694
  %696 = load i32, i32* %695, align 4
  %697 = xor i32 %691, %696
  %698 = lshr i32 %686, 16
  %699 = and i32 %698, 63
  %700 = zext i32 %699 to i64
  %701 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %700
  %702 = load i32, i32* %701, align 4
  %703 = xor i32 %697, %702
  %704 = lshr i32 %686, 24
  %705 = and i32 %704, 63
  %706 = zext i32 %705 to i64
  %707 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %706
  %708 = load i32, i32* %707, align 4
  %709 = xor i32 %703, %708
  %710 = shl i32 %683, 28
  %711 = lshr i32 %683, 4
  %712 = or i32 %710, %711
  %713 = getelementptr inbounds i32, i32* %684, i32 1
  %714 = load i32, i32* %684, align 4
  %715 = xor i32 %712, %714
  %716 = and i32 %715, 63
  %717 = zext i32 %716 to i64
  %718 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %717
  %719 = load i32, i32* %718, align 4
  %720 = xor i32 %709, %719
  %721 = lshr i32 %715, 8
  %722 = and i32 %721, 63
  %723 = zext i32 %722 to i64
  %724 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %723
  %725 = load i32, i32* %724, align 4
  %726 = xor i32 %720, %725
  %727 = lshr i32 %715, 16
  %728 = and i32 %727, 63
  %729 = zext i32 %728 to i64
  %730 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %729
  %731 = load i32, i32* %730, align 4
  %732 = xor i32 %726, %731
  %733 = lshr i32 %715, 24
  %734 = and i32 %733, 63
  %735 = zext i32 %734 to i64
  %736 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %735
  %737 = load i32, i32* %736, align 4
  %738 = xor i32 %732, %737
  %739 = getelementptr inbounds i32, i32* %713, i32 1
  %740 = load i32, i32* %713, align 4
  %741 = xor i32 %738, %740
  %742 = and i32 %741, 63
  %743 = zext i32 %742 to i64
  %744 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %743
  %745 = load i32, i32* %744, align 4
  %746 = xor i32 %683, %745
  %747 = lshr i32 %741, 8
  %748 = and i32 %747, 63
  %749 = zext i32 %748 to i64
  %750 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %749
  %751 = load i32, i32* %750, align 4
  %752 = xor i32 %746, %751
  %753 = lshr i32 %741, 16
  %754 = and i32 %753, 63
  %755 = zext i32 %754 to i64
  %756 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %755
  %757 = load i32, i32* %756, align 4
  %758 = xor i32 %752, %757
  %759 = lshr i32 %741, 24
  %760 = and i32 %759, 63
  %761 = zext i32 %760 to i64
  %762 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %761
  %763 = load i32, i32* %762, align 4
  %764 = xor i32 %758, %763
  %765 = shl i32 %738, 28
  %766 = lshr i32 %738, 4
  %767 = or i32 %765, %766
  %768 = getelementptr inbounds i32, i32* %739, i32 1
  %769 = load i32, i32* %739, align 4
  %770 = xor i32 %767, %769
  %771 = and i32 %770, 63
  %772 = zext i32 %771 to i64
  %773 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %772
  %774 = load i32, i32* %773, align 4
  %775 = xor i32 %764, %774
  %776 = lshr i32 %770, 8
  %777 = and i32 %776, 63
  %778 = zext i32 %777 to i64
  %779 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %778
  %780 = load i32, i32* %779, align 4
  %781 = xor i32 %775, %780
  %782 = lshr i32 %770, 16
  %783 = and i32 %782, 63
  %784 = zext i32 %783 to i64
  %785 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %784
  %786 = load i32, i32* %785, align 4
  %787 = xor i32 %781, %786
  %788 = lshr i32 %770, 24
  %789 = and i32 %788, 63
  %790 = zext i32 %789 to i64
  %791 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %790
  %792 = load i32, i32* %791, align 4
  %793 = xor i32 %787, %792
  %794 = getelementptr inbounds i32, i32* %768, i32 1
  %795 = load i32, i32* %768, align 4
  %796 = xor i32 %793, %795
  %797 = and i32 %796, 63
  %798 = zext i32 %797 to i64
  %799 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %798
  %800 = load i32, i32* %799, align 4
  %801 = xor i32 %738, %800
  %802 = lshr i32 %796, 8
  %803 = and i32 %802, 63
  %804 = zext i32 %803 to i64
  %805 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %804
  %806 = load i32, i32* %805, align 4
  %807 = xor i32 %801, %806
  %808 = lshr i32 %796, 16
  %809 = and i32 %808, 63
  %810 = zext i32 %809 to i64
  %811 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %810
  %812 = load i32, i32* %811, align 4
  %813 = xor i32 %807, %812
  %814 = lshr i32 %796, 24
  %815 = and i32 %814, 63
  %816 = zext i32 %815 to i64
  %817 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %816
  %818 = load i32, i32* %817, align 4
  %819 = xor i32 %813, %818
  %820 = shl i32 %793, 28
  %821 = lshr i32 %793, 4
  %822 = or i32 %820, %821
  %823 = getelementptr inbounds i32, i32* %794, i32 1
  %824 = load i32, i32* %794, align 4
  %825 = xor i32 %822, %824
  %826 = and i32 %825, 63
  %827 = zext i32 %826 to i64
  %828 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %827
  %829 = load i32, i32* %828, align 4
  %830 = xor i32 %819, %829
  %831 = lshr i32 %825, 8
  %832 = and i32 %831, 63
  %833 = zext i32 %832 to i64
  %834 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %833
  %835 = load i32, i32* %834, align 4
  %836 = xor i32 %830, %835
  %837 = lshr i32 %825, 16
  %838 = and i32 %837, 63
  %839 = zext i32 %838 to i64
  %840 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %839
  %841 = load i32, i32* %840, align 4
  %842 = xor i32 %836, %841
  %843 = lshr i32 %825, 24
  %844 = and i32 %843, 63
  %845 = zext i32 %844 to i64
  %846 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %845
  %847 = load i32, i32* %846, align 4
  %848 = xor i32 %842, %847
  %849 = getelementptr inbounds i32, i32* %823, i32 1
  %850 = load i32, i32* %823, align 4
  %851 = xor i32 %848, %850
  %852 = and i32 %851, 63
  %853 = zext i32 %852 to i64
  %854 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %853
  %855 = load i32, i32* %854, align 4
  %856 = xor i32 %793, %855
  %857 = lshr i32 %851, 8
  %858 = and i32 %857, 63
  %859 = zext i32 %858 to i64
  %860 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %859
  %861 = load i32, i32* %860, align 4
  %862 = xor i32 %856, %861
  %863 = lshr i32 %851, 16
  %864 = and i32 %863, 63
  %865 = zext i32 %864 to i64
  %866 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %865
  %867 = load i32, i32* %866, align 4
  %868 = xor i32 %862, %867
  %869 = lshr i32 %851, 24
  %870 = and i32 %869, 63
  %871 = zext i32 %870 to i64
  %872 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %871
  %873 = load i32, i32* %872, align 4
  %874 = xor i32 %868, %873
  %875 = shl i32 %848, 28
  %876 = lshr i32 %848, 4
  %877 = or i32 %875, %876
  %878 = getelementptr inbounds i32, i32* %849, i32 1
  %879 = load i32, i32* %849, align 4
  %880 = xor i32 %877, %879
  %881 = and i32 %880, 63
  %882 = zext i32 %881 to i64
  %883 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %882
  %884 = load i32, i32* %883, align 4
  %885 = xor i32 %874, %884
  %886 = lshr i32 %880, 8
  %887 = and i32 %886, 63
  %888 = zext i32 %887 to i64
  %889 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %888
  %890 = load i32, i32* %889, align 4
  %891 = xor i32 %885, %890
  %892 = lshr i32 %880, 16
  %893 = and i32 %892, 63
  %894 = zext i32 %893 to i64
  %895 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %894
  %896 = load i32, i32* %895, align 4
  %897 = xor i32 %891, %896
  %898 = lshr i32 %880, 24
  %899 = and i32 %898, 63
  %900 = zext i32 %899 to i64
  %901 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %900
  %902 = load i32, i32* %901, align 4
  %903 = xor i32 %897, %902
  %904 = getelementptr inbounds i32, i32* %878, i32 1
  %905 = load i32, i32* %878, align 4
  %906 = xor i32 %903, %905
  %907 = and i32 %906, 63
  %908 = zext i32 %907 to i64
  %909 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox8, i64 0, i64 %908
  %910 = load i32, i32* %909, align 4
  %911 = xor i32 %848, %910
  %912 = lshr i32 %906, 8
  %913 = and i32 %912, 63
  %914 = zext i32 %913 to i64
  %915 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox6, i64 0, i64 %914
  %916 = load i32, i32* %915, align 4
  %917 = xor i32 %911, %916
  %918 = lshr i32 %906, 16
  %919 = and i32 %918, 63
  %920 = zext i32 %919 to i64
  %921 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox4, i64 0, i64 %920
  %922 = load i32, i32* %921, align 4
  %923 = xor i32 %917, %922
  %924 = lshr i32 %906, 24
  %925 = and i32 %924, 63
  %926 = zext i32 %925 to i64
  %927 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox2, i64 0, i64 %926
  %928 = load i32, i32* %927, align 4
  %929 = xor i32 %923, %928
  %930 = shl i32 %903, 28
  %931 = lshr i32 %903, 4
  %932 = or i32 %930, %931
  %933 = getelementptr inbounds i32, i32* %904, i32 1
  %934 = load i32, i32* %904, align 4
  %935 = xor i32 %932, %934
  %936 = and i32 %935, 63
  %937 = zext i32 %936 to i64
  %938 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox7, i64 0, i64 %937
  %939 = load i32, i32* %938, align 4
  %940 = xor i32 %929, %939
  %941 = lshr i32 %935, 8
  %942 = and i32 %941, 63
  %943 = zext i32 %942 to i64
  %944 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox5, i64 0, i64 %943
  %945 = load i32, i32* %944, align 4
  %946 = xor i32 %940, %945
  %947 = lshr i32 %935, 16
  %948 = and i32 %947, 63
  %949 = zext i32 %948 to i64
  %950 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox3, i64 0, i64 %949
  %951 = load i32, i32* %950, align 4
  %952 = xor i32 %946, %951
  %953 = lshr i32 %935, 24
  %954 = and i32 %953, 63
  %955 = zext i32 %954 to i64
  %956 = getelementptr inbounds [64 x i32], [64 x i32]* @sbox1, i64 0, i64 %955
  %957 = load i32, i32* %956, align 4
  %958 = xor i32 %952, %957
  %959 = shl i32 %958, 31
  %960 = lshr i32 %958, 1
  %961 = or i32 %959, %960
  %962 = xor i32 %961, %903
  %963 = and i32 %962, -1431655766
  %964 = xor i32 %961, %963
  %965 = xor i32 %903, %963
  %966 = shl i32 %965, 31
  %967 = lshr i32 %965, 1
  %968 = or i32 %966, %967
  %969 = lshr i32 %968, 8
  %970 = xor i32 %969, %964
  %971 = and i32 %970, 16711935
  %972 = xor i32 %964, %971
  %973 = shl i32 %971, 8
  %974 = xor i32 %968, %973
  %975 = lshr i32 %974, 2
  %976 = xor i32 %975, %972
  %977 = and i32 %976, 858993459
  %978 = xor i32 %972, %977
  %979 = shl i32 %977, 2
  %980 = xor i32 %974, %979
  %981 = lshr i32 %978, 16
  %982 = xor i32 %981, %980
  %983 = and i32 %982, 65535
  %984 = xor i32 %980, %983
  %985 = shl i32 %983, 16
  %986 = xor i32 %978, %985
  %987 = lshr i32 %986, 4
  %988 = xor i32 %987, %984
  %989 = and i32 %988, 252645135
  %990 = xor i32 %984, %989
  %991 = shl i32 %989, 4
  %992 = xor i32 %986, %991
  %993 = getelementptr inbounds i8, i8* %2, i64 0
  %994 = lshr i32 %992, 24
  %995 = trunc i32 %994 to i8
  store i8 %995, i8* %993, align 1
  %996 = lshr i32 %992, 16
  %997 = trunc i32 %996 to i8
  %998 = getelementptr inbounds i8, i8* %993, i64 1
  store i8 %997, i8* %998, align 1
  %999 = lshr i32 %992, 8
  %1000 = trunc i32 %999 to i8
  %1001 = getelementptr inbounds i8, i8* %993, i64 2
  store i8 %1000, i8* %1001, align 1
  %1002 = trunc i32 %992 to i8
  %1003 = getelementptr inbounds i8, i8* %993, i64 3
  store i8 %1002, i8* %1003, align 1
  %1004 = getelementptr inbounds i8, i8* %2, i64 4
  %1005 = lshr i32 %990, 24
  %1006 = trunc i32 %1005 to i8
  store i8 %1006, i8* %1004, align 1
  %1007 = lshr i32 %990, 16
  %1008 = trunc i32 %1007 to i8
  %1009 = getelementptr inbounds i8, i8* %1004, i64 1
  store i8 %1008, i8* %1009, align 1
  %1010 = lshr i32 %990, 8
  %1011 = trunc i32 %1010 to i8
  %1012 = getelementptr inbounds i8, i8* %1004, i64 2
  store i8 %1011, i8* %1012, align 1
  %1013 = trunc i32 %990 to i8
  %1014 = getelementptr inbounds i8, i8* %1004, i64 3
  store i8 %1013, i8* %1014, align 1
  ret i32 0
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.9.1 (tags/RELEASE_391/final)"}
